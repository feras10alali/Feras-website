{
  "version": 3,
  "sources": ["../../@auth/sveltekit/dist/client.js"],
  "sourcesContent": ["import { base } from \"$app/paths\";\n/**\n * Client-side method to initiate a signin flow\n * or send the user to the signin page listing all possible providers.\n *\n * [Documentation](https://authjs.dev/reference/sveltekit/client#signin)\n */\nexport async function signIn(providerId, options, authorizationParams) {\n    const { callbackUrl = window.location.href, redirect = true } = options ?? {};\n    // TODO: Support custom providers\n    const isCredentials = providerId === \"credentials\";\n    const isEmail = providerId === \"email\";\n    const isSupportingReturn = isCredentials || isEmail;\n    const basePath = base ?? \"\";\n    const signInUrl = `${basePath}/auth/${isCredentials ? \"callback\" : \"signin\"}/${providerId}`;\n    const _signInUrl = `${signInUrl}?${new URLSearchParams(authorizationParams)}`;\n    const res = await fetch(_signInUrl, {\n        method: \"post\",\n        headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            \"X-Auth-Return-Redirect\": \"1\",\n        },\n        // @ts-ignore\n        body: new URLSearchParams({\n            ...options,\n            callbackUrl,\n        }),\n    });\n    const data = await res.clone().json();\n    if (redirect || !isSupportingReturn) {\n        // TODO: Do not redirect for Credentials and Email providers by default in next major\n        window.location.href = data.url ?? callbackUrl;\n        // If url contains a hash, the browser does not reload the page. We reload manually\n        if (data.url.includes(\"#\"))\n            window.location.reload();\n        return;\n    }\n    return res;\n}\n/**\n * Signs the user out, by removing the session cookie.\n *\n * [Documentation](https://authjs.dev/reference/sveltekit/client#signout)\n */\nexport async function signOut(options) {\n    const { callbackUrl = window.location.href } = options ?? {};\n    const basePath = base ?? \"\";\n    const res = await fetch(`${basePath}/auth/signout`, {\n        method: \"post\",\n        headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            \"X-Auth-Return-Redirect\": \"1\",\n        },\n        body: new URLSearchParams({\n            callbackUrl,\n        }),\n    });\n    const data = await res.json();\n    const url = data.url ?? callbackUrl;\n    window.location.href = url;\n    // If url contains a hash, the browser does not reload the page. We reload manually\n    if (url.includes(\"#\"))\n        window.location.reload();\n}\n"],
  "mappings": ";;;AAAA,SAAS,YAAY;AAOrB,eAAsB,OAAO,YAAY,SAAS,qBAAqB;AACnE,QAAM,EAAE,cAAc,OAAO,SAAS,MAAM,WAAW,KAAK,IAAI,WAAW,CAAC;AAE5E,QAAM,gBAAgB,eAAe;AACrC,QAAM,UAAU,eAAe;AAC/B,QAAM,qBAAqB,iBAAiB;AAC5C,QAAM,WAAW,QAAQ;AACzB,QAAM,YAAY,GAAG,QAAQ,SAAS,gBAAgB,aAAa,QAAQ,IAAI,UAAU;AACzF,QAAM,aAAa,GAAG,SAAS,IAAI,IAAI,gBAAgB,mBAAmB,CAAC;AAC3E,QAAM,MAAM,MAAM,MAAM,YAAY;AAAA,IAChC,QAAQ;AAAA,IACR,SAAS;AAAA,MACL,gBAAgB;AAAA,MAChB,0BAA0B;AAAA,IAC9B;AAAA;AAAA,IAEA,MAAM,IAAI,gBAAgB;AAAA,MACtB,GAAG;AAAA,MACH;AAAA,IACJ,CAAC;AAAA,EACL,CAAC;AACD,QAAM,OAAO,MAAM,IAAI,MAAM,EAAE,KAAK;AACpC,MAAI,YAAY,CAAC,oBAAoB;AAEjC,WAAO,SAAS,OAAO,KAAK,OAAO;AAEnC,QAAI,KAAK,IAAI,SAAS,GAAG;AACrB,aAAO,SAAS,OAAO;AAC3B;AAAA,EACJ;AACA,SAAO;AACX;AAMA,eAAsB,QAAQ,SAAS;AACnC,QAAM,EAAE,cAAc,OAAO,SAAS,KAAK,IAAI,WAAW,CAAC;AAC3D,QAAM,WAAW,QAAQ;AACzB,QAAM,MAAM,MAAM,MAAM,GAAG,QAAQ,iBAAiB;AAAA,IAChD,QAAQ;AAAA,IACR,SAAS;AAAA,MACL,gBAAgB;AAAA,MAChB,0BAA0B;AAAA,IAC9B;AAAA,IACA,MAAM,IAAI,gBAAgB;AAAA,MACtB;AAAA,IACJ,CAAC;AAAA,EACL,CAAC;AACD,QAAM,OAAO,MAAM,IAAI,KAAK;AAC5B,QAAM,MAAM,KAAK,OAAO;AACxB,SAAO,SAAS,OAAO;AAEvB,MAAI,IAAI,SAAS,GAAG;AAChB,WAAO,SAAS,OAAO;AAC/B;",
  "names": []
}
